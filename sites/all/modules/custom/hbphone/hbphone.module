<?php
/**
 * Function which holds an array of supported countries.
 *
 * @param string $countrycode
 * @return boolean Returns the whole array of countries $countrycode isn't specified and a country name for when it is specified.
 */
function phone_countries($code = NULL) {
  static $countries;

  if (!isset($countries)) {
   $countries = array(
      'th' => 'Thailand',
    );
  }
  return ($code === NULL) ? $countries : (isset($countries[$code]) ? $countries[$code] : NULL);
}



/**
* @file
* An example field using the Field API.
*
*/
function hbphone_field_info() {
  return array(
    'phone' => array(
      'label' => t('Phone Number'),
      'description' => t('Display phone number'),
      'instance_settings' => array(
        'phone_country_code' => 0,
        'phone_default_country_code' => '66',
        'phone_int_max_length' => 15,
        'ca_phone_separator' => '-',
        'ca_phone_parentheses' => 1,
      ),
      'default_formatter' => 'phone',
      'default_widget' => 'phone_textfield',
      'property_type' => 'text',
    ),
  );
}

/**
 * Implements hook_field_is_empty().
 */
function hbphone_field_is_empty($item, $field) {
  return empty($item['value']);
}

/**
 * Implements hook_field_settings_form().
 */
function hbphone_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];

  $form = array();
  $form['country'] = array(
    '#type' => 'select',
    '#title' => t('Country'),
    '#options' => phone_countries(),
    '#default_value' => isset ($settings['country']) ? $settings['country'] : NULL,
    '#description' => t('Which country-specific rules should this field be validated against and formatted according to.'),
    '#disabled' => $has_data,
    '#required' => TRUE,
  );

  return $form;
}

/**
 * Implements hook_field_instance_settings_form().
 */
function hbphone_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];

  $form['phone_country_code'] = array(
    '#type' => 'checkbox',
    '#title' => t('Add the country code if not filled by the user'),
    '#default_value' => $settings['phone_country_code'],
  );

  return $form;
}

/**
 * Implements hook_field_validate().
 */
function hbphone_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if (isset($item['value']) && $item['value'] != '') {
      $ccode = $field['settings']['country'];
      $value = $item['value'];
      if (!valid_phone_number($ccode, $value)) {
        $country = phone_country_info($ccode);
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'phone_invalid_number',
          'message' => t($country['error'], array('%value' => $value)),
        );
      }
    }
  }
}

/**
 * Verification for Phone Numbers.
 *
 * @param string $countrycode
 * @param string $phonenumber
 * @return boolean Returns boolean FALSE if the phone number is not valid.
 */
function valid_phone_number($countrycode, $phonenumber) {

  $countrycode = trim($countrycode);
  $phonenumber = trim($phonenumber);

  if (phone_supported_countrycode($countrycode)) {
    $valid_phone_function = 'valid_'. $countrycode . '_phone_number';
    module_load_include('inc', 'hbphone', 'inc/phone.'. $countrycode);

    if (function_exists($valid_phone_function)) {
       return $valid_phone_function($phonenumber);
    }
  }
  //Country not taken into account yet
  return FALSE;
}

/**
 * Country supported or not by the module ?
 *
 * @param string $countrycode
 * @return boolean Returns a boolean containting the answer to the question.
 */
function phone_supported_countrycode($countrycode) {
  return (phone_country_info($countrycode) !== NULL ? TRUE : FALSE);
}


/**
 * Get a country meta info
 *
 * @param string $countrycode
 * @return array Returns a array containing country metadata
 */
function phone_country_info($countrycode = NULL) {
  static $i;

  $countrycode = trim($countrycode);

  if (phone_countries($countrycode) !== FALSE) {
    $phone_info_function = 'phone_'. $countrycode . '_metadata';
    module_load_include('inc', 'hbphone', 'inc/phone.'. $countrycode);

    if (function_exists($phone_info_function)) {
      return $phone_info_function();
    }
  }
  //Country not taken into account yet
  return FALSE;
}

/**
 * Implements hook_field_formatter_info().
 */
function hbphone_field_formatter_info() {
  return array(
    'phone' => array(
      'label' => t('Default'),
      'field types' => array('phone'),
    )
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function hbphone_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  foreach ($items as $delta => $item) {
    $text = '';

    if (isset($item['value'])) {
      $text = check_plain($item['value']);
      // iPhone Support
      if (strpos($_SERVER['HTTP_USER_AGENT'], 'iPhone') !== FALSE) {
         $text = '<a href="tel:' . $text . '">' . $text . '</a>';
      }
    }
    $element[$delta]['#markup'] = $text;
  }
  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function hbphone_field_widget_info() {
  return array(
    'phone_textfield' => array(
      'label' => t('Text field'),
      'field types' => array('phone'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function hbphone_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element += array(
    '#type' => 'textfield',
    '#title' => $element['#title'],
    '#description' => $element['#description'],
    '#default_value' => isset($items[$delta]['value']) ? $items[$delta]['value'] : '',
    '#required' => $element['#required'],
    '#size' => 17,
    '#maxlength' => NULL,
  );
  return array('value' => $element);
}

/**
 * Implements hook_field_presave().
 */
function hbphone_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  $ccode = $field['settings']['country'];
  if (phone_countries($ccode) !== NULL) {
    foreach ($items as $delta => $item) {
      if (isset($item['value'])) {
        $items[$delta]['value'] = format_phone_number($ccode, $item['value'], $instance['settings']);
      }
    }
  }
}

/**
 * Formatting for Phone Numbers.
 *
 * @param string $countrycode
 * @param string $phonenumber
 * @return boolean Returns boolean FALSE if the phone number is not valid.
 */
function format_phone_number($countrycode, $phonenumber, $field) {

  $countrycode = trim($countrycode);
  $phonenumber = trim($phonenumber);

  if (phone_supported_countrycode($countrycode)) {
    $format_phone_function = 'format_'. $countrycode . '_phone_number';
    module_load_include('inc', 'hbphone', 'inc/phone.'. $countrycode);

    if (function_exists($format_phone_function)) {
      return $format_phone_function($phonenumber, $field);
    }
  }
  //Country not taken into account yet
  return FALSE;
}